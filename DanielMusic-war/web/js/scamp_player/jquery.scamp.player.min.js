/*
 * Scamp Player ver. 2.1.0
 * jQuery SoundManager 2 Plugin
 *
 * Copyright (c) 2015 Mariusz Rek
 * Rascals Themes 2015
 *
 */
(function (a) {
    a.ScampPlayer = function (b, c) {
        var l = {
            sm_options: {},
            queue: null,
            iscroll_options: {
                scrollX: false,
                scrollY: true,
                mouseWheel: true,
                scrollbars: true,
                interactiveScrollbars: true,
                scrollbars: "custom",
                        click: true
            },
            volume: 100,
            autoplay: false,
            loop: false,
            random: false,
            titlebar: false,
            no_track_image: null,
            delay: 5,
            path: null,
            client_id: "23f5c38e0aa354cdd0e1a6b4286f6aa4",
            debug: false,
            link_filter: ".track-title",
            labels: {
                play: "Play",
                cover: "Cover",
                title: "Title/Artist",
                buy: "Buy",
                remove: "Remove"
            },
            obj: {
                status: "ready",
                action: "",
                tracks: [],
                tracks_size: 0,
                track_nr: -1
            },
            mobile: false,
            status: null,
            soundcloud: false,
            track_id: 0,
            new_tracks_nr: 0,
            new_tracks_notifications: true,
            sm_init: false,
            rebuild: false,
            sound: null,
            track: null,
            searching: false,
            tracklist_length: null,
            document_title: document.title,
            track_html: null,
            tracklist: null,
            onReady: function () {
            },
            onTrackEnd: function () {
            },
            onTrackStart: function () {
            }
        };
        var d = this;
        d.settings = {};
        var p = function () {
            d.settings = a.extend({}, l, c);
            d.el = b;
            if (window.soundManager) {
                sm_obj = {
                    onready: function () {
                        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                            d.settings.mobile = true;
                        }
                        if (d.settings.mobile) {
                            d.settings.autoplay = false;
                        }
                        if (d.settings.mobile && d.settings.path != null) {
                            a("body").append('<div id="scamp-mobile-init"></div>');
                            var v = soundManager.createSound({
                                id: "init_mobile_track",
                                url: d.settings.path + "/blank.mp3",
                                autoload: false,
                                volume: 10,
                                onload: function () {
                                },
                                onplay: function () {
                                },
                                onpause: function () {
                                },
                                onresume: function () {
                                },
                                onstop: function () {
                                },
                                onfinish: function () {
                                },
                                whileloading: function () {
                                },
                                whileplaying: function () {
                                }
                            });
                            a("#scamp-mobile-init").on("touchstart click mousemove", function (y) {
                                v.play();
                                a(this).remove();
                            });
                        }
                        if (typeof SC !== "undefined") {
                            SC.initialize({
                                client_id: d.settings.client_id
                            });
                            SC.whenStreamingReady(function () {
                                d.settings.soundcloud = true;
                            });
                        }
                        d.settings.sm_init = true;
                        var w = null;
                        if (a("> a", d.el).length) {
                            w = new Array();
                            var x = a("> a", d.el).length;
                            a("> a", d.el).each(function () {
                                w.push(a(this));
                                a(this).remove();
                            });
                        }
                        d.el.append('<div id="sp-toggle-wrap"><div id="sp-toggle"></div></div><div class="sp-main-container"><div class="sp-queue-container"><div class="sp-queue"><div id="sp-scroller"><table id="sp-queue-scroll"><thead><tr><th>' + d.settings.labels.play + "</th><th>" + d.settings.labels.cover + '</th><th class="sp-th-title">' + d.settings.labels.title + '</th><th class="sp-th-cart sp-small-screen">' + d.settings.labels.buy + '</th><th class="sp-th-remove sp-small-screen sp-medium-screen">' + d.settings.labels.remove + '</th></tr></thead><tbody></tbody></table></div></div><div class="sp-progress-mobile"><div class="sp-progress"><span class="sp-loading"></span><span class="sp-position"></span><span class="sp-time-elapsed"></span><span class="sp-time-total"></span></div></div></div><div class="sp-player-container"><div class="sp-buttons-container"><div class="sp-controls"><a class="sp-prev-button"></a><a class="sp-play-button"></a><a class="sp-next-button"></a><div class="sp-volume-container"><div class="sp-volume-bar-container"><div class="sp-volume-slider"><span class="sp-volume-position"></span></div></div><a class="sp-volume-button"></a></div></div><div class="sp-queue-button-container"><span class="sp-badge"></span><a class="sp-queue-button"></a></div></div><div class="sp-progress-container"><div class="sp-progress"><span class="sp-loading"></span><span class="sp-position"></span><span class="sp-time-elapsed"></span><span class="sp-time-total"></span></div></div><div class="sp-track-container"><div class="sp-track-details"><a class="sp-track-cover"><img src="' + d.settings.no_track_image + '" alt="Track cover" class="sp-track-artwork"/></a><a class="sp-track-title"></a><a class="sp-track-artist"></a><div class="sp-marquee-container"><span class="sp-marquee"></span></div></div></div></div></div>');
                        d.settings.track_html = ['<tr class="sp-track">', '<td><a class="sp-track-control sp-icon" href="#"></a></td>', '<td class="sp-cover-artwork"><img src="" alt="Cover" /></td>', '<td class="sp-title"><a class="sp-title-button"></a><a class="sp-artist-button"></a></td>', '<td class="sp-cart sp-small-screen"><a class="sp-icon sp-cart-button"></a></td>', '<td class="sp-remove sp-small-screen sp-medium-screen"><span class="sp-icon sp-remove-button"></span></td>'].join("\n");
                        d.settings.tracklist = a("#sp-queue-scroll");
                        if (typeof IScroll !== "undefined") {
                            d.settings.queue = new IScroll("#sp-scroller", d.settings.iscroll_options);
                        } else {
                            return false;
                        }
                        if (a(d.el).hasClass("sp-show-list")) {
                            _set_queue_height();
                        }
                        a(".sp-volume-position").css("width", d.settings.volume + "%");
                        _set_vol_class(d.settings.volume);
                        if (!d.settings.mobile) {
                            var u = function (y) {
                                a(".sp-volume-bar-container").fadeToggle(200, "swing");
                                d.el.removeClass("sp-show-list");
                                y.preventDefault();
                                y.stopPropagation();
                            };
                            a(".sp-volume-button").on("click", u);
                            a(document).click(function (z) {
                                var y = a(".sp-volume-bar-container");
                                if (!y.is(z.target) && y.has(z.target).length === 0) {
                                    a(".sp-volume-button").off("click");
                                    a(".sp-volume-bar-container").fadeOut(200, "swing", function () {
                                        a(".sp-volume-button").on("click", u);
                                    });
                                }
                            });
                        }
                        if (w !== null) {
                            d.settings.obj = {
                                status: "working",
                                action: "add_tracks",
                                tracks: w,
                                tracks_size: x,
                                track_nr: -1,
                            };
                            s();
                        }
                        a(".sp-play-button").on("touchstart click", m);
                        a(".sp-next-button").on("touchstart click", f);
                        a(".sp-prev-button").on("touchstart click", e);
                        a(".sp-queue-button").on("touchstart click", function (y) {
                            d.el.toggleClass("sp-show-list");
                            _set_queue_height();
                            y.preventDefault();
                        });
                        a("#sp-toggle").on("touchstart click", function (y) {
                            d.el.toggleClass("sp-show-player");
                            y.preventDefault();
                        });
                        k();
                        d.update_events("body");
                        d.el.addClass("sp-show");
                        d.settings.onReady.call(undefined);
                        return;
                    },
                    ontimeout: function () {
                    },
                    defaultOptions: {
                        volume: d.settings.volume,
                        usePeakData: false
                    }
                };
                a.extend(d.settings.sm_options, sm_obj);
                soundManager.setup(d.settings.sm_options);
            }
        };
        _set_queue_height = function () {
            var v = a(".sp-player-container", d.el).outerHeight();
            var u = a(".sp-progress-mobile ", d.el).outerHeight();
            var w = a(window).height();
            if (a(".sp-progress-mobile", d.el).is(":visible")) {
                w = w - (v * 2);
            } else {
                w = w - v;
                v = 0;
            }
            a(".sp-queue-container", d.el).css("padding-bottom", v);
            a(".sp-queue-container", d.el).height(w);
            setTimeout(function () {
                d.settings.queue.refresh();
            }, 200);
            return w;
        };
        a(window).on("resize", _set_queue_height);
        _get_track_index = function () {
            var u, v = d.settings.track.find(".sp-track-control").attr("href");
            track_from_queue = a("#sp-queue-scroll").find('.sp-track-control[href="' + v + '"]');
            u = track_from_queue.parents('tr[class*="sp-track"]').index();
            return u;
        };
        var g = function () {
            var u = d.settings.track.find(".sp-track-control").attr("href");
            d.settings.sound = soundManager.createSound({
                id: "scamp_sound",
                url: u,
                autoload: false,
                volume: d.settings.volume,
                onload: function () {
                },
                onplay: function () {
                    var v = {
                        title: d.settings.track.find(".sp-title-button").text(),
                        url: d.settings.track.find(".sp-track-control").attr("href"),
                        artist: d.settings.track.find(".sp-artist-button").text(),
                        track_index: _get_track_index(),
                        tracklist_length: d.settings.tracklist_length
                    };
                    d.settings.onTrackStart.call(this, v);
                    if (d.settings.sound.readyState == 3) {
                        d.settings.status = "play";
                    } else {
                        d.settings.track.addClass("loading");
                        d.el.addClass("loading");
                        d.settings.status = "loading";
                    }
                    d.update_content();
                    a(".sp-volume-position").css("width", d.settings.volume + "%");
                    d.settings.sound.setVolume(d.settings.volume);
                },
                onpause: function () {
                    d.settings.status = "pause";
                    d.update_content();
                    if (!d.settings.searching) {
                        d.settings.track.removeClass("playing").addClass("paused");
                        d.el.removeClass("playing").addClass("paused");
                    }
                },
                onresume: function () {
                    d.settings.status = "play";
                    d.update_content();
                    d.settings.track.removeClass("paused").addClass("playing");
                    d.el.removeClass("paused").addClass("playing");
                },
                onstop: function () {
                    d.settings.sound.setPosition(0);
                    d.settings.status = "stop";
                    d.update_content();
                    d.settings.track.removeClass("playing loading paused");
                    d.el.removeClass("playing loading paused");
                    a(".sp-time-elapsed, .sp-time-total").empty();
                    a(".sp-progress").find(".sp-position").width(0);
                },
                onfinish: function () {
                    var v = {
                        title: d.settings.track.find(".sp-title-button").text(),
                        url: d.settings.track.find(".sp-track-control").attr("href"),
                        artist: d.settings.track.find(".sp-artist-button").text(),
                        track_index: _get_track_index(),
                        tracklist_length: d.settings.tracklist_length
                    };
                    d.settings.onTrackEnd.call(this, v);
                    a(".sp-time-elapsed, .sp-time-total").empty();
                    a(".sp-progress").find(".sp-position").width(0);
                    d.settings.status = "stop";
                    d.update_content();
                    d.settings.track.removeClass("loading paused");
                    d.el.removeClass("loading paused");
                    if (d.settings.random) {
                        r();
                        return false;
                    }
                    if (d.settings.loop) {
                        f();
                    } else {
                        var w = _get_track_index();
                        if (w != d.settings.tracklist_length) {
                            f();
                        } else {
                            d.settings.track.removeClass("playing");
                            d.el.removeClass("playing");
                        }
                    }
                },
                whileloading: function () {
                    a(".sp-progress").find(".sp-loading").width(d.settings.sound.bytesLoaded / d.settings.sound.bytesTotal * 100 + "%");
                },
                whileplaying: function () {
                    d.settings.track.removeClass("paused loading").addClass("playing");
                    d.el.removeClass("paused loading").addClass("playing");
                    d.settings.status = "play";
                    d.update_content();
                    a(".sp-progress").find(".sp-position").width(d.settings.sound.position / d.settings.sound.durationEstimate * 100 + "%");
                    a(".sp-time-elapsed").html(_format_time(d.settings.sound.position));
                    a(".sp-time-total").html(_format_time(d.settings.sound.durationEstimate));
                }
            });
            d.settings.sound.togglePause();
            t();
        };

        d.grabTrack = function () {
            url = "./MusicController?target=GrabASong";
            $.ajax({
                type: "GET",
                async: false,
                url: url,
                dataType: "text",
                success: function (val) {
                    var json = JSON.parse(val);
                    if (json.result) {
//return the song;
                    }
                },
                error: function (xhr, status, error) {
                    hideLoader();
                    ajaxResultsError(xhr, status, error);
                }
            });
        }

        var m = function () {
            if (d.settings.tracklist_length == null) {
                return;
            }
            if (d.settings.track == null) {
                d.settings.track = a("#sp-queue-scroll tbody tr:eq(0)");
            }
            if (d.settings.sound) {
                d.settings.sound.togglePause();
            } else {
                g();
            }
            if (d.settings.titlebar) {
                document.title = d.settings.track.find(".sp-title-button").text() + " | " + d.settings.document_title;
            }
            return false;
        };
        var r = function () {
            if (d.settings.tracklist_length == null || d.settings.tracklist_length < 2) {
                d.settings.track = u;
                m();
                return false;
            }

            function v(z, y) {
                return Math.floor(Math.random() * (y - z + 1)) + z;
            }
            var x = _get_track_index(),
                    u = null,
                    w = null;
            while ((w = v(0, d.settings.tracklist_length)) == x) {
            }
            d.settings.track.removeClass("playing");
            d.el.removeClass("playing");
            u = a("#sp-queue-scroll tbody tr:eq(" + w + ")");
            _destruct_sound();
            d.settings.track = u;
            m();
            if (d.settings.sound) {
                d.settings.sound.setPosition(0);
            }
            return true;
        };
        var f = function () {
            if (d.settings.tracklist_length == null) {
                return;
            }
            var x = _get_track_index(),
                    v = x + 1,
                    u = null,
                    w = false;
            if (d.el.hasClass("playing")) {
                d.settings.track.removeClass("playing");
                d.el.removeClass("playing");
                w = true;
            }
            if (v > d.settings.tracklist_length) {
                v = 0;
            }
            u = a("#sp-queue-scroll tbody tr:eq(" + v + ")");
            _destruct_sound();
            d.settings.track = u;
            if (w) {
                m();
            }
            if (d.settings.sound) {
                d.settings.sound.setPosition(0);
            }
            return false;
        };
        var e = function () {
            if (d.settings.tracklist_length == null) {
                return;
            }
            var x = _get_track_index(),
                    w = x - 1,
                    u = null,
                    v = false;
            if (d.el.hasClass("playing")) {
                d.settings.track.removeClass("playing");
                d.el.removeClass("playing");
                v = true;
            }
            if (w < 0) {
                w = d.settings.tracklist_length;
            }
            u = a("#sp-queue-scroll tbody tr:eq(" + w + ")");
            _destruct_sound();
            d.settings.track = u;
            if (v) {
                m();
            }
            if (d.settings.sound) {
                d.settings.sound.setPosition(0);
            }
            return false;
        };
        var j = function () {
            if (d.settings.tracklist_length == null) {
                return;
            }
            if (d.settings.track == null) {
                d.settings.track = a("#sp-queue-scroll tbody tr:eq(0)");
            }
            if (d.settings.sound) {
                d.settings.sound.stop();
            }
            return false;
        };
        var t = function () {
            a(".sp-track-container a", d.el).removeAttr("href").removeAttr("target");
            a(".sp-track-container .sp-track-title, .sp-track-container .sp-track-artist", d.el).text("");
            a(".sp-track-container .sp-track-artwork", d.el).attr("src", d.settings.no_track_image);
            a(".sp-marquee", d.el).text("");
            if (d.settings.sound) {
                var A = d.settings.track.find(".sp-cover-artwork img").attr("src"),
                        B = d.settings.track.find(".sp-title-button").text(),
                        w = d.settings.track.find(".sp-artist-button").text(),
                        y = d.settings.track.find(".sp-artist-button").attr("href"),
                        v = d.settings.track.find(".sp-artist-button").attr("target"),
                        u = d.settings.track.find(".sp-title-button").attr("href"),
                        z = d.settings.track.find(".sp-title-button").attr("target");
                shop_url = d.settings.track.find(".sp-tl-shop").attr("href"), shop_target = d.settings.track.find(".sp-tl-shop").attr("target");
                if (w !== "" && y !== "") {
                    a(".sp-track-container .sp-track-artist", d.el).attr("href", y);
                    if (v !== "") {
                        v = v;
                    } else {
                        v = "_self";
                    }
                    a(".sp-track-container .sp-track-artist", d.el).attr("target", v);
                }
                if (u !== "") {
                    a(".sp-track-container .sp-track-title", d.el).attr("href", u);
                    if (z !== "") {
                        z = z;
                    } else {
                        z = "_self";
                    }
                    a(".sp-track-container .sp-track-title", d.el).attr("target", z);
                }
                a(".sp-track-container .sp-track-artwork", d.el).attr("src", A);
                a(".sp-track-container .sp-track-title", d.el).text(B);
                a(".sp-track-container .sp-track-artist", d.el).text(w);
                var x = "<strong>" + B + "</strong>";
                if (w !== "") {
                    x = x + " - " + w;
                }
                a(".sp-marquee", d.el).html(x);
            }
            return false;
        };
        _destruct_sound = function () {
            if (d.settings.sound) {
                d.settings.sound.stop();
                d.settings.sound.setPosition(0);
                d.settings.sound.destruct();
                d.settings.sound = null;
                t();
            }
        };
        var s = function () {
            d.settings.obj.track_nr++;
            if (d.settings.obj.track_nr == 0) {
                d.el.addClass("sp-queue-loading");
                a(".sp-queue").css("opacity", 0);
            }
            if (d.settings.obj.track_nr >= d.settings.obj.tracks_size) {
                h();
            } else {
                setTimeout(q, d.settings.delay);
            }
        };
        var h = function () {
            var v = null,
                    u = null,
                    w = null;
            if (a("#sp-scroller tr").length > 0 && d.settings.rebuild) {
                _set_queue_height();
                d.el.removeClass("sp-queue-loading");
                a(".sp-queue").css("opacity", 1);
                d.settings.rebuild = false;
                if (d.settings.new_tracks_notifications) {
                    a(".sp-badge", d.el).text("+" + d.settings.new_tracks_nr);
                    if (a(".sp-badge", d.el).text() != "+0") {
                        a(".sp-badge", d.el).addClass("sp-show-badge");
                        setTimeout(function () {
                            a(".sp-badge", d.el).removeClass("sp-show-badge");
                        }, 5000);
                    }
                }
                d.settings.new_tracks_nr = 0;
            } else {
                d.el.removeClass("sp-queue-loading");
                a(".sp-queue").css("opacity", 1);
            }
            if (d.settings.track != null && d.settings.autoplay) {
                if (d.settings.random) {
                    r();
                } else {
                    m();
                }
                d.settings.autoplay = false;
            }
            if (d.settings.obj.action == "play_track" || d.settings.obj.action == "play_tracks") {
                for (var x = 0; x < d.settings.obj.tracks_size; x++) {
                    v = d.settings.obj.tracks[x].data("status");
                    w = d.settings.obj.tracks[x].attr("href");
                    if (v == "track_ready" || v == "already_onlist") {
                        u = d.settings.track.find(".sp-track-control").attr("href");
                        if (u != w) {
                            _destruct_sound();
                            var y = a("#sp-queue-scroll").find('.sp-track-control[href="' + w + '"]');
                            d.settings.track = y.parents('tr[class*="sp-track"]');
                        }
                        m();
                        break;
                    }
                }
            }
            d.settings.obj.status = "ready";
        };
        var q = function () {
            var w = d.settings.obj.track_nr,
                    v = d.settings.obj.tracks[w].attr("href"),
                    u = /http(s?):\/\/soundcloud/;
            if (u.test(v)) {
                if (a('.sp-queue .sp-track[data-sc="' + v + '"]').length > 0) {
                    d.settings.obj.tracks[w].attr("data-status", "already_onlist");
                    var x = a('#sp-queue-scroll tbody .sp-track[data-sc="' + v + '"]');
                    x = x.find(".sp-track-control").attr("href");
                    d.settings.obj.tracks[w].attr("href", x);
                    s();
                } else {
                    _add_soundcloud();
                }
            } else {
                if (a('.sp-queue .sp-track-control[href="' + v + '"]').length > 0) {
                    d.settings.obj.tracks[w].attr("data-status", "already_onlist");
                    s();
                } else {
                    if (v != "" || v != "#" || v != undefined) {
                        d.settings.obj.tracks[w].attr("data-status", "file_exists");
                        _create_track();
                    } else {
                        d.settings.obj.tracks[w].attr("data-status", "Error404");
                        s();
                    }
                }
            }
        };
        _add_soundcloud = function () {
            var w = d.settings.obj.track_nr,
                    u = d.settings.obj.tracks[w].attr("href");
            if (d.settings.client_id == "") {
                d.settings.obj.tracks[w].attr("data-status", "Error404");
                s();
                return false;
            } else {
                if (!d.settings.soundcloud) {
                    d.settings.obj.tracks[w].attr("data-status", "Error404");
                    s();
                    return false;
                }
            }
            if (d.settings.obj.tracks[w].data("sc_stream") != undefined) {
                var v = {
                    stream_url: null,
                    artwork_url: null,
                    title: null,
                    permalink_url: null,
                    user: {
                        username: null,
                        permalink_url: null
                    }
                };
                v.stream_url = d.settings.obj.tracks[w].data("sc_stream");
                v.artwork_url = d.settings.obj.tracks[w].data("sc_art");
                v.title = d.settings.obj.tracks[w].data("sc_title");
                v.user.username = d.settings.obj.tracks[w].data("artist");
                v.user.permalink = d.settings.obj.tracks[w].data("artist_url");
                v.permalink = d.settings.obj.tracks[w].data("release_url");
                _create_soundcloud(v);
                return false;
            }
            SC.get("/resolve", {
                url: u
            }, function (x) {
                if (x.length != undefined) {
                    x.tracks = x;
                }
                if (x.errors) {
                    d.settings.obj.tracks[w].attr("data-status", "Error404");
                    s();
                } else {
                    if (x.kind != undefined && x.kind == "user") {
                        SC.get("/users/" + x.id + "/tracks", function (y) {
                            y.tracks = y;
                            _process_sc_tracks(y);
                        });
                    } else {
                        if (x.kind != undefined && x.kind == "group") {
                            SC.get("/groups/" + x.id + "/tracks", function (y) {
                                y.tracks = y;
                                _process_sc_tracks(y);
                            });
                        } else {
                            if (x.tracks) {
                                _process_sc_tracks(x);
                            } else {
                                _create_soundcloud(x);
                            }
                        }
                    }
                }
            });
        };
        _process_sc_tracks = function (x) {
            var A = d.settings.obj.track_nr,
                    u = d.settings.obj.tracks[A].attr("href"),
                    v = A,
                    B = [],
                    w = d.settings.obj.tracks[A].attr("data-artist"),
                    D = d.settings.obj.tracks[A].attr("data-artist_url"),
                    C = d.settings.obj.tracks[A].attr("data-artist_target"),
                    z = d.settings.obj.tracks[A].attr("data-release_url"),
                    y = d.settings.obj.tracks[A].attr("data-release_target");
            shop_url = d.settings.obj.tracks[A].attr("data-shop_url"), shop_target = d.settings.obj.tracks[A].attr("data-shop_target");
            d.settings.obj.tracks.splice(A, 1);
            d.settings.obj.tracks_size = d.settings.obj.tracks_size - 1;
            d.settings.obj.track_nr = d.settings.obj.track_nr - 1;
            if (shop_url == undefined || shop_url == "") {
                shop_url = "";
            }
            if (shop_target == undefined || shop_target == "") {
                shop_target = "";
            }
            a.each(x.tracks, function (J, G) {
                var L, K, F, I, H;
                if (w == undefined || w == "") {
                    L = G.user.username;
                } else {
                    L = w;
                }
                if (D == undefined || D == "") {
                    K = G.user.permalink_url;
                    F = "_blank";
                } else {
                    K = D;
                    if (C == undefined || C == "") {
                        F = "_blank";
                    } else {
                        F = C;
                    }
                }
                if (z == undefined || z == "") {
                    I = G.permalink_url;
                    H = "_blank";
                } else {
                    I = z;
                    if (y == undefined || y == "") {
                        H = "_blank";
                    } else {
                        H = y;
                    }
                }
                var E = '<a href="' + G.permalink_url + '" data-cover="" data-sc_list="' + u + '" data-sc_stream="' + G.stream_url + '" data-sc_art="' + G.artwork_url + '" data-sc_title="' + G.title + '" data-artist="' + L + '" data-artist_url="' + K + '" data-artist_target="' + F + '" data-release_url="' + I + '" data-release_target="' + H + '" data-shop_url="' + shop_url + '" data-shop_target="' + shop_target + '">' + G.title + "</a>";
                B.push(a(E));
            });
            _insert_array_at(d.settings.obj.tracks, v, B);
            d.settings.obj.tracks_size = d.settings.obj.tracks_size + B.length;
            s();
        };
        _insert_array_at = function (w, v, u) {
            Array.prototype.splice.apply(w, [v, 0].concat(u));
            return w;
        };
        _create_soundcloud = function (w) {
            var y = d.settings.obj.track_nr,
                    u = d.settings.obj.tracks[y].attr("href"),
                    C = w.stream_url,
                    v = d.settings.obj.tracks[y].attr("data-artist"),
                    B = d.settings.obj.tracks[y].attr("data-artist_url"),
                    A = d.settings.obj.tracks[y].attr("data-artist_target"),
                    z = d.settings.obj.tracks[y].attr("data-release_url"),
                    x = d.settings.obj.tracks[y].attr("data-release_target");
            if (C === undefined) {
                console.log("Soundcloud error: No stream URL!");
                d.settings.obj.tracks[y].attr("data-status", "Error404");
                s();
                return false;
            }
            (C.indexOf("secret_token") == -1) ? C = C + "?" : C = C + "&";
            C = C + "consumer_key=" + d.settings.client_id;
            if (v == undefined || v == "") {
                v = w.user.username;
            }
            if (B == undefined || B == "") {
                B = w.user.permalink_url;
            }
            if (A == undefined || A == "") {
                A = "_blank";
            }
            if (z == undefined || z == "") {
                z = w.permalink_url;
            }
            if (x == undefined || x == "") {
                x = "_blank";
            }
            d.settings.obj.tracks[y].attr("data-sc", u);
            d.settings.obj.tracks[y].attr("href", C);
            d.settings.obj.tracks[y].attr("data-cover", w.artwork_url);
            d.settings.obj.tracks[y].attr("data-artist", v);
            d.settings.obj.tracks[y].attr("data-artist_url", B);
            d.settings.obj.tracks[y].attr("data-artist_target", A);
            d.settings.obj.tracks[y].attr("data-release_url", z);
            d.settings.obj.tracks[y].attr("data-release_target", x);
            d.settings.obj.tracks[y].text(w.title);
            _create_track();
        };
        _create_track = function () {
            d.settings.rebuild = true;
            var D = d.settings.obj.track_nr,
                    u = d.settings.obj.tracks[D].attr("href"),
                    C = d.settings.obj.tracks[D].text(),
                    I = d.settings.obj.tracks[D].data("cover"),
                    y = d.settings.obj.tracks[D].data("artist"),
                    G = d.settings.obj.tracks[D].data("artist_url"),
                    F = d.settings.obj.tracks[D].data("artist_target"),
                    E = d.settings.obj.tracks[D].data("release_url"),
                    B = d.settings.obj.tracks[D].data("release_target"),
                    x = d.settings.obj.tracks[D].data("shop_url"),
                    A = d.settings.obj.tracks[D].data("shop_target"),
                    z = a(d.settings.track_html),
                    w = null;
            if (a('.sp-queue .sp-track-control[href="' + u + '"]', d.el).length) {
                d.settings.obj.tracks[D].attr("data-status", "already_onlist");
                s();
                return false;
            }
            z.find(".sp-track-control").attr("href", u);
            if (I == undefined || I == "") {
                I = d.settings.no_track_image;
            }
            z.find(".sp-cover-artwork img").attr("src", I);
            z.find(".sp-title-button").text(C);
            if (E != undefined || E != "") {
                z.find(".sp-title-button").attr("href", E);
                if (B != undefined || B != "") {
                    z.find(".sp-title-button").attr("target", B);
                }
            }
            if (y != undefined && y != "") {
                z.find(".sp-artist-button").text(y);
                if (G != undefined || G != "") {
                    z.find(".sp-artist-button").attr("href", G);
                    if (F != undefined && F != "") {
                        z.find(".sp-artist-button").attr("target", F);
                    }
                }
            }
            if (x != undefined && x != "") {
                z.find(".sp-cart-button").attr("href", x);
                if (A != undefined && A != "") {
                    z.find(".sp-cart-button").attr("target", A);
                }
            } else {
                z.find(".sp-cart-button").remove();
            }
            if (d.settings.obj.tracks[D].data("sc") != undefined) {
                var v = d.settings.obj.tracks[D].data("sc");
                z.attr("data-sc", v).addClass("sc-track");
            }
            if (d.settings.obj.tracks[D].data("sc_list") != undefined) {
                var H = d.settings.obj.tracks[D].data("sc_list");
                z.attr("data-sc_list", H).addClass("sc-list");
            }
            d.settings.tracklist.append(z);
            w = d.settings.tracklist.find(z);
            d.settings.track_id++;
            d.settings.new_tracks_nr++;
            d.settings.tracklist_length = a("#sp-queue-scroll tbody .sp-track").length - 1;
            if (d.settings.tracklist_length == 0) {
                d.settings.track = w;
            }
            d.settings.obj.tracks[D].attr("data-status", "track_ready");
            w.find(".sp-track-control").on("click", i);
            w.find(".sp-remove-button").on("click", n);
            s();
        };
        var i = function (u) {
            u.preventDefault();
            var v = a(this).parents('tr[class*="sp-track"]');
            if (v.hasClass("playing") || v.hasClass("paused")) {
                m();
                return false;
            }
            _destruct_sound();
            d.settings.track = v;
            m();
            return false;
        };
        var n = function (x) {
            x.preventDefault();
            var y = a(this).parents('tr[class*="sp-track"]'),
                    B = a(this).parents('tr[class*="sp-track"]').index(),
                    z = null,
                    A = false;
            if (y.hasClass("playing")) {
                A = true;
            }
            if (d.settings.sound) {
                z = d.settings.sound.url;
            }
            if (d.settings.tracklist_length == 0) {
                _destruct_sound();
                d.settings.track = null;
                d.settings.tracklist_length = null;
                o(0);
                return;
            }
            if (z == y.find(".sp-track-control ").attr("href")) {
                var w = B,
                        v = w + 1,
                        u = null;
                if (v > d.settings.tracklist_length) {
                    v = 0;
                }
                u = a("#sp-queue-scroll tbody tr:eq(" + v + ")");
                if (A) {
                    _destruct_sound();
                    d.settings.track = u;
                    m();
                } else {
                    _destruct_sound();
                }
            }
            o(B);
            d.settings.tracklist_length = a("#sp-queue-scroll tbody .sp-track").length - 1;
        };
        var o = function (u) {
            if (a("#sp-scroller tr").length > 0) {
                d.settings.tracklist.find("tbody tr:eq(" + u + ")").remove();
                _set_queue_height;
            }
            return false;
        };
        var k = function () {
            var u = "ontouchstart" in window,
                    x = u ? "touchstart" : "mousedown",
                    y = u ? "touchmove" : "mousemove",
                    v = u ? "touchend" : "mouseup",
                    w = u ? "touchcancel" : "mouseup";
            a(".sp-volume-slider").on(x, function (F) {
                if (d.settings.tracklist_length == null) {
                    return;
                }
                var C = a(this),
                        z = C.find(".sp-volume-position"),
                        E = C.offset().left,
                        B = C.width(),
                        D = d.settings.sound,
                        A = null;
                a(document).on(y, function (I) {
                    var H = u ? I.originalEvent.touches[0] : I;
                    var G = Math.max(0, Math.min(H.clientX - E, B));
                    A = Math.floor(G / B * 100);
                    z.width(G);
                    if (D) {
                        D.setVolume(A);
                    }
                    _set_vol_class(A);
                    return false;
                }).on(v, function (G) {
                    d.settings.volume = A;
                    a(this).unbind(y);
                    a(this).unbind(v);
                    return false;
                }).trigger({
                    type: y,
                    clientX: F.clientX
                });
                return false;
            });
            a(".sp-progress").bind(x, function (E) {
                if (d.settings.tracklist_length == null) {
                    return;
                }
                var A = a(this).addClass("searching"),
                        z = A.find(".sp-postion"),
                        D = A.offset().left,
                        B = A.width(),
                        C = d.settings.sound;
                d.settings.searching = true;
                C.pause();
                a(document).bind(y, function (H) {
                    var G = u ? H.originalEvent.touches[0] : H;
                    var F = Math.max(0, Math.min(G.clientX - D, B));
                    z.width(F);
                    if (C) {
                        C.setPosition(F / B * C.durationEstimate);
                    }
                    return false;
                }).bind(v, function (F) {
                    d.settings.searching = false;
                    A.removeClass("searching");
                    if (d.el.hasClass("playing") && C) {
                        C.resume();
                    }
                    a(this).unbind(y);
                    a(this).unbind(v);
                    return false;
                }).trigger({
                    type: y,
                    clientX: E.clientX
                });
                return false;
            });
        };
        _set_vol_class = function (u) {
            if (u == 0) {
                a(".sp-volume-button").removeClass("sp-vol-medium sp-vol-max").addClass("sp-vol-off");
            } else {
                if (u <= 50) {
                    a(".sp-volume-button").removeClass("sp-vol-max sp-vol-off").addClass("sp-vol-medium");
                } else {
                    if (u > 75) {
                        a(".sp-volume-button").removeClass("sp-vol-medium sp-vol-off").addClass("sp-vol-max");
                    }
                }
            }
        };
        _format_time = function (v) {
            var x = Math.floor(v / 1000),
                    u = Math.floor(x / 60),
                    w = x - u * 60;
            return u + ":" + (w < 10 ? "0" + w : w);
        };
        _pretty_link = function (z) {
            var E = "",
                    B = "",
                    u = z.attr("href"),
                    F = z.data("cover"),
                    w = z.data("artist"),
                    D = z.data("artist_url"),
                    C = z.data("artist_target"),
                    A = z.data("release_url"),
                    y = z.data("release_target"),
                    v = z.data("shop_url"),
                    x = z.data("shop_target");
            if (d.settings.link_filter != undefined && d.settings.link_filter != "") {
                if (a(z).find(d.settings.link_filter).length) {
                    B = a(z).find(d.settings.link_filter).text();
                }
            }
            if (F == undefined || F == "") {
                F = "";
            } else {
                F = 'data-cover="' + F + '"';
            }
            if (w == undefined || w == "") {
                w = "";
            } else {
                w = 'data-artist="' + w + '"';
            }
            if (D == undefined || D == "") {
                D = "";
            } else {
                D = 'data-artist_url="' + D + '"';
            }
            if (C == undefined || C == "") {
                C = "";
            } else {
                C = 'data-artist_target="' + C + '"';
            }
            if (A == undefined || A == "") {
                A = "";
            } else {
                A = 'data-release_url="' + A + '"';
            }
            if (y == undefined || y == "") {
                y = "";
            } else {
                y = 'data-release_target="' + y + '"';
            }
            if (v == undefined || v == "") {
                v = "";
            } else {
                v = 'data-shop_url="' + v + '"';
            }
            if (x == undefined || x == "") {
                x = "";
            } else {
                x = 'data-shop_target="' + x + '"';
            }
            E = '<a href="' + u + '" ' + F + " " + w + " " + D + " " + C + " " + A + " " + y + " " + v + " " + x + ">" + B + "</a>";
            E = a(E);
            return E;
        };
        _add_track = function (w) {
            w.preventDefault();
            if ("#" == a(this).attr("href") || "" == a(this).attr("href")) {
                return false;
            }
            if (d.settings.obj.status == "working") {
                return false;
            }
            var u = _pretty_link(a(this)),
                    v = [u];
            d.settings.obj = {
                status: "working",
                action: "add_track",
                tracks: v,
                tracks_size: 1,
                track_nr: -1
            };
            s();
            return false;
        };
        _play_track = function (w) {
            w.preventDefault();
            if ("#" == a(this).attr("href") || "" == a(this).attr("href")) {
                return false;
            }
            if (d.settings.obj.status == "working") {
                return false;
            }
            var u = _pretty_link(a(this)),
                    v = [u];
            if (d.settings.mobile) {
                var x = "add_track";
            } else {
                var x = "play_track";
            }
            d.settings.obj = {
                status: "working",
                action: "play_track",
                tracks: v,
                tracks_size: 1,
                track_nr: -1
            };
            s();
            return false;
        };
        _add_tracks = function (v) {
            v.preventDefault();
            var y = a(this).data("id");
            if (y == undefined || y == "" || a("#" + y).length <= 0) {
                return false;
            }
            if (d.settings.obj.status == "working") {
                return false;
            }
            var x = a("#" + y),
                    u = new Array(),
                    w = a("a.sp-add-track, a.sp-play-track", x).length;
            a("a.sp-add-track, a.sp-play-track", x).each(function (z) {
                u.push(_pretty_link(a(this)));
            });
            d.settings.obj = {
                status: "working",
                action: "add_tracks",
                tracks: u,
                tracks_size: w,
                track_nr: -1
            };
            s();
        };
        _play_tracks = function (v) {
            v.preventDefault();
            var z = a(this).data("id");
            if (z == undefined || z == "" || a("#" + z).length <= 0) {
                return false;
            }
            if (d.settings.obj.status == "working") {
                return false;
            }
            var x = a("#" + z),
                    u = new Array(),
                    w = a("a.sp-add-track, a.sp-play-track", x).length;
            a("a.sp-add-track, a.sp-play-track", x).each(function (A) {
                u.push(_pretty_link(a(this)));
            });
            if (d.settings.mobile) {
                var y = "add_tracks";
            } else {
                var y = "play_tracks";
            }
            d.settings.obj = {
                status: "working",
                action: "play_tracks",
                tracks: u,
                tracks_size: w,
                track_nr: -1
            };
            s();
        };
        _debug = function (u) {
            if (d.settings.debug) {
                a("#scamp-console").append(u + "<br>");
            }
        };
        d.update_events = function (u) {
            a(u).off("click", ".sp-add-track", _add_track);
            a(u).off("click", ".sp-play-track", _play_track);
            a(u).off("click", ".sp-add-list", _add_tracks);
            a(u).off("click", ".sp-play-list", _play_tracks);
            a(u).on("click", ".sp-add-track", _add_track);
            a(u).on("click", ".sp-play-track", _play_track);
            a(u).on("click", ".sp-add-list", _add_tracks);
            a(u).on("click", ".sp-play-list", _play_tracks);
        };
        d.update_content = function () {
            var w = d.settings.track,
                    u = null;
            if (w == null) {
                return;
            }
            a("a.sp-play-track").removeClass("sp-play sp-pause sp-stop sp-loading");
            if (w.hasClass("sc-list")) {
                u = w.data("sc_list");
            } else {
                if (w.hasClass("sc-track")) {
                    u = w.data("sc");
                } else {
                    u = w.find(".sp-track-control").attr("href");
                }
            }
            var v = a('a.sp-play-track[href="' + u + '"]');
            if (v.length > 0) {
                switch (d.settings.status) {
                    case "loading":
                        v.addClass("sp-loading");
                        break;
                    case "play":
                        v.addClass("sp-play");
                        break;
                    case "pause":
                        v.addClass("sp-pause");
                        break;
                    case "stop":
                        v.addClass("sp-stop");
                        break;
                }
            }
        };
        d.addTrack = function (u, w) {
            if (d.settings.obj.status == "working") {
                return false;
            }
            if (typeof u == "undefined") {
                return false;
            }
            var u = a('<a href="' + u.url + '" data-cover="' + u.cover + '" data-artist="' + u.artist + '" data-artist_url="' + u.artist_url + '" data-artist_target="' + u.artist_target + '" data-release_url="' + u.release_url + '" data-release_target="' + u.release_target + '" data-shop_url="' + u.shop_url + '" data-shop_target="' + u.shop_target + '">' + u.title + "</a>"),
                    v = [u];
            d.settings.obj = {
                status: "working",
                action: w,
                tracks: v,
                tracks_size: 1,
                track_nr: -1
            };
            s();
            return false;
        };
        d.addTracks = function (x, A) {
            if (d.settings.obj.status == "working") {
                return false;
            }
            if (typeof x == "undefined" || x.length == 0) {
                return false;
            }
            var u = new Array(),
                    z = x.length;
            for (var y = 0, w = z; y < w; y++) {
                var v = a('<a href="' + x[y].url + '" data-cover="' + x[y].cover + '" data-artist="' + x[y].artist + '" data-artist_url="' + x[y].artist_url + '" data-artist_target="' + x[y].artist_target + '" data-release_url="' + x[y].release_url + '" data-release_target="' + x[y].release_target + '" data-shop_url="' + x[y].shop_url + '" data-shop_target="' + x[y].shop_target + '">' + x[y].title + "</a>");
                u.push(v);
            }
            d.settings.obj = {
                status: "working",
                action: A,
                tracks: u,
                tracks_size: z,
                track_nr: -1
            };
            s();
        };
        d.playerAction = function (u) {
            if (d.settings.obj.status == "working") {
                return false;
            }
            if (u == "play") {
                m();
            } else {
                if (u == "stop") {
                    j();
                } else {
                    if (u == "next") {
                        f();
                    } else {
                        if (u == "prev") {
                            e();
                        }
                    }
                }
            }
        };
        p();
    };
})(jQuery);